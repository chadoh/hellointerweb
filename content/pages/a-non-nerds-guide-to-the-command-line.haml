Layout: slides

%section
  %section
    %h3 A Non-Nerd's Guide To
    %h1 The Command Line
    %img(src='http://blog.marc-seeger.de/assets/2009/12/30/terminal.png'
         alt='' class='no-border')
    :markdown

      To jump right in and start using it, go that way. &rarr;

      &darr; Or go this way to get some context.

      <small>Using the arrow keys on your keyboard works the best.</small>

  %section
    %h2 1969
    :markdown
      The year [Unix][unix] was invented. It's still one of the most-used
      operating systems in the world (just think: all of Google's servers use
      it).  Mac OSX and Linux are based on it. When you use the command line,
      you're using your computer the way people used computers decades before
      colorful screens and the mouse were in use.

        [unix]: https://en.wikipedia.org/wiki/Unix

  %section
    %h2 Shell
    :markdown
      The [Bourne Shell][sh] (abbreviated as simply _sh_) was created as a way
      to interact with Unix in 1977.  Lots of other shells were invented later
      that added more features.  You may have noticed that your Terminal says
      something about "bash"&mdash; bash is the [Bourne-again shell][bash] and
      was first created in 1989. A lot of cool kids these days use [zsh][zsh]
      (z shell), if you care about what the cool kids do.

        [sh]: http://www-stat.wharton.upenn.edu/~buja/STAT-540/shell-Bourne-An-Introduction-to-the-Unix-Shell.htm
        [bash]: https://en.wikipedia.org/wiki/Bash_(Unix_shell)
        [zsh]: https://friedcpu.wordpress.com/2007/07/24/zsh-the-last-shell-youll-ever-need/

  %section
    %h2 So what?
    :markdown
      So why do people still use it?

      Because it's _easy_.

      That is, it's hard to write programs that use graphics. Writing programs
      that run in a shell, though, is easy peasy. So, there are all kinds
      of things that you can only do using shell.

      Getting started in it is a bit strange, admittedly, but it opens up whole
      new worlds (it _is_ a whole new world). Don't get overwhelmed, just take
      it slow. Any familiarity will be great, so if it starts feeling
      overwhelming, just stop for the day.

%section
  %h2 Ingredients
  %h3 On a Mac
  :markdown
    * Hit Command & Space and type "Terminal". Open it. This is your "command
      line".
    * Open up Finder (you can do the Command-Space thing again) and find your
      home directory (it's the one in the sidebar with a house icon, and it's
      probably named after you).
  %h3 On Windows
  :markdown
    * Open up [Git-Bash][gitbash]. This is your "command line".
    * Open your My Documents folder (or whatever it's called these days).

      [gitbash]: http://git-scm.com/download/win

%section
  %section
    %h2 Listing
    :markdown
      The command line is a very simple way of interacting with a computer (simple
      for the computer, anyhow!). You just type a command and then hit "Enter" on
      your keyboard.

      <small>This obviously requires a bit of memorization. But
      the internet is there when we forget.</small>

      One command that people use all the time is listing files. Try it now! Type
      what comes after the dollar sign into your command line, and then hit Enter:

          $ ls

      Compare it to what you see in Finder/Explorer. It's an old-school way of
      listing files!

      &darr; That way to learn more about listing.

  %section
    %h3 Long Listing
    :markdown
      Now press the up arrow on your keyboard. Now that you got your `ls` back,
      turn it into this & hit Enter:

          $ ls -l

      The `-l` is called a "flag". You added a `-l` flag to the `ls` command,
      which tells `ls` to "long list" your files. This gives you all sorts of
      info about your files, like who owns them, what you can do with them,
      and the file size. Here's [what it all means][ls], if
      you're curious (and brave).

        [ls]: http://freeengineer.org/learnUNIXin10minutes.html#Listing

      One more thing about listing, right this way. &darr;

  %section
    %h3 Listing Hidden Files
    :markdown
      All this time using your computer, and you never even knew it was hiding
      all sorts of things from you! Enter this:

          $ ls -al

      Now you've added _two_ flags for `ls`. The `l` tells it to list "long",
      the `a` tells it to list "all". Not just the usual stuff, but all the
      stuff that's usually hidden from you, too!

      Hidden files start with a dot. They're often called "dotfiles". Notice
      the two "files" listed at the top, the single dot and the double dot.
      These aren't actual files. You'll learn more about them soon. &rarr;

%section
  %section
    %h2 Moving Around
    :markdown
      In the days when the command line was created, folders were called
      _directories_. So to <strong>c</strong>hange
      <strong>d</strong>irectories, try this:

          $ cd Desktop
          $ ls

      Now you're looking at your desktop on the command line. You
      <strong>c</strong>hanged into the <strong>d</strong>irectory called
      Desktop.

      &darr; This way to keep from getting lost.

  %section
    %h3 Where Are You?
    :markdown
      In case you forget what directory you're currently working in, you
      can ask to be told:

          $ pwd

      This means Print Working Directory; it prints the directory you're
      working in _to the screen_. (When this command was invented, screens
      didn't exist, so it would have actually printed it!)

      To get back to where you just came from, you could write `cd` followed
      by everything `pwd` showed you, minus the `/Desktop`. But there's
      an easier way. &darr;

  %section
    %h3 Back In With Your Parent
    :markdown
      To get into the _parent_ directory, do this

          $ cd ..

      So that `..` that you see when you `ls -a` is a link to a directory. A
      link to the parent directory of the one you're in. If this all feels
      really weird, try just `cd`ing into different folders and `cd ..`ing back
      out for a while, hitting `pwd` to see where you are in between.

      `..` isn't the only shortcut, though. &darr;

  %section
    %h3 Be Lazy
    :markdown
      Good coders are lazy. They do work up front to prevent long-term work.
      Here are some tricks to avoid typing:

      * `.` means "the directory you're in now". `ls .` = `ls`; `cd .` does nothing.
        But it's useful sometimes.
      * `~` (tilde) means "your home directory". You can `cd` into really obscure
        folders and easily `ls ~` or `cd ~`.
      * `cd` without anything after it (without any _arguments_) does the same
        thing as `cd ~`. It takes you home.
      * `*` (often called _splat_ because "asterisk" is _too long_) is a
        wildcard; try `ls ~/D*` & `ls ~/*s`.
      * `cd -` takes you back to the previous directory, so you can switch back &
        forth between two easily.

%section
  %section
    %h2 A New Name, A Move, A Copy
    :markdown
      Renaming a file is the same thing as moving it. You "move" it from
      one place/name to another. Let's create a file:

          $ touch tmp.txt

      <small>(`touch` will create a file if it doesn't exist, or re-save a file that's
      already there.)</small>

      move it:

          $ mv tmp.txt ~/Desktop

      and then rename it:

          $ cd ~/Desktop
          $ mv tmp.txt woohoo.txt

      To learn to make copies, this way. &darr;

  %section
    %h3 Copy Cat
    :markdown
      Let's make two of something.

          $ touch woohoo.txt
          $ cp woohoo.txt tmp.txt && ls

      `cp` makes copies. You just tell it the file to copy, and then the new place
      and name to put it/name it.

      The `&&` is how you enter multiple commands on one line. Make sure you use
      _two_ "&"s, though; using only one does something _veeery_ different!
      You'll be very confused if you only use one!

      <small>Using only one `&` starts something in the background. Search online
      to find out more about it.</small>

%section
  %section
    %h2 Reading Files
    :markdown
      Listing files is cool & all, but what if you want to see what's in them?
      There are lots of ways to do this. Some of the most common are `cat`
      (which con*cat*enates files), `more`, and `less`. Download [this
      file][quote] into your current working directory (remember [pwd][pwd]?)
      and then take a look:

          $ cat this-is-water
          $ more this-is-water
          $ less this-is-water

      Oh no! Now your whole terminal window has been taken over by `less`! And
      the scrolling's all weird! What to do? &darr;

        [quote]: /this-is-water
        [pwd]: #/3/1

  %section
    %h3 Less Is More
    :markdown
      So `cat` and `more` just plopped the contents of the file into _standard
      output_, but `less` took things over & messed up your scrolling. To get
      out of it, hit `q`. Phew!

      Ok, but let's try it again, with a bigger file. Download [this][dooms]
      to your current working directory and then type

          $ less my-father

      <small>At this point I _must_ pause and tell you to hit _Tab_ on your
      keyboard. Ta-da! Stop typing so much.</small>

      Ok, now, to scroll down, hit `Space` or `d`. To scroll up, hit `b` or
      `u`. These are common scrolling controls. `more` and `cat` actually use
      them, too, if the content is too big to all fit in your window.

        [dooms]: /my-father-moved-through-dooms-of-love

%section
  %section
    %h2 Delete, Delete.
    :markdown
      The command line has no safety nets! When you delete things, they're gone
      for good. No steenkin' _trash_, no steenkin' _recycle bin_. Just _gone_.
      So be careful!

      But to get rid of the files you just downloaded, you can

          $ rm my-father-moved-through-dooms-of-love this-is-water

      Note that you just passed `rm` _two_ files to delete. You can list
      however many you want.

      But to `rm` whole folders, you'll need a different trick. &darr;

  %section
    %h3 Removing Whole Directories
    :markdown
      If you try to `rm` a directory, `rm` will get all whiny and say it can't.
      But you can make it do it anyway by passing it the `-r` flag.  (The `-r`
      stands for _recursive_, because if you're peculiar you might say that
      you're deleting the folder and then _recursively_ deleting everything in
      it. Maybe?? Anyhow.) Try it out! Make a directory then delete it:

          $ mkdir worthless-folder
          $ rm worthless-folder
          $ rm -r worthless-folder

%section
  %h2 Congratulations!
  :markdown
    You're now significantly more hireable! That's really all it takes. You're
    on your way to tapping into the unbridled power of the shell.

    These were the basics. Play with what you learned! Have fun! Come back here
    when you forget things.

    When you're ready, you can learn how the pros do it with [this fledgling
    nerd's guide to the command line][fledgling-nerds-guide].

      [fledgling-nerds-guide]: /a-fledgling-nerds-guide-to-the-command-line
