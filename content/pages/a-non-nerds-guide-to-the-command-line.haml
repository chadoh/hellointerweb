Layout: slides

%section
  %section
    %h3 A Non-Nerd's Guide To
    %h1 The Command Line
    %img(src='http://blog.marc-seeger.de/assets/2009/12/30/terminal.png'
         alt='' class='no-border')
    :markdown

      To jump right in and start using it, go that way. &rarr;

      &darr; Or go this way to get some context.

      <small>Using the arrow keys on your keyboard works the best.</small>

  %section
    %h2 1969
    :markdown
      The year [Unix][unix] was invented. It's still one of the most-used
      operating systems in the world (just think: all of Google's servers use
      it).  Mac OSX and Linux are based on it. When you use the command line,
      you're using your computer the way people used computers decades before
      colorful screens and the mouse were in use.

        [unix]: https://en.wikipedia.org/wiki/Unix

  %section
    %h2 Shell
    :markdown
      The [Bourne Shell][sh] (abbreviated as simply _sh_) was created as a way
      to interact with Unix in 1977.  Lots of other shells were invented later
      that added more features.  You may have noticed that your Terminal says
      something about "bash"&mdash; bash is the [Bourne-again shell][bash] and
      was first created in 1989. A lot of cool kids these days use [zsh][zsh]
      (z shell), if you care about what the cool kids do.

        [sh]: http://www-stat.wharton.upenn.edu/~buja/STAT-540/shell-Bourne-An-Introduction-to-the-Unix-Shell.htm
        [bash]: https://en.wikipedia.org/wiki/Bash_(Unix_shell)
        [zsh]: https://friedcpu.wordpress.com/2007/07/24/zsh-the-last-shell-youll-ever-need/

  %section
    %h2 So what?
    :markdown
      So why do people still use it?

      Because it's _easy_.

      That is, it's hard to write programs that use graphics. Writing programs
      that run in a shell, though, is easy as escargot. So, there are all kinds
      of things that you can only do using shell.

      Getting started in it is a bit strange, admittedly, but it opens up whole
      new worlds (it _is_ a whole new world). Don't get overwhelmed, just take
      it slow. Any familiarity will be great, so if it starts feeling
      overwhelming, just stop for the day.

%section
  %h2 Ingredients
  %h3 On a Mac
  :markdown
    * Hit Command & Space and type "Terminal". Open it. This is your "command
      line".
    * Open up Finder (you can do the Command-Space thing again).
  %h3 On Windows
  :markdown
    * Open up [Git-Bash][gitbash]. This is your "command line".
    * Open your My Documents folder (or whatever it's called these days).

      [gitbash]: http://git-scm.com/download/win

%section
  %section
    %h3 Listing
    :markdown
      The command line is a very simple way of interacting with a computer (simple
      for the computer, anyhow!). You just type a command and then hit "Enter" on
      your keyboard.

      <small>This obviously requires a bit of memorization. But
      the internet is there when we forget.</small>

      One command that people use all the time is listing files. Try it now! Type
      what comes after the dollar sign into your command line, and then hit Enter:

          $ ls

      Compare it to what you see in Finder/Explorer. It's an old-school way of
      listing files!

      &darr; That way to learn more about listing.

  %section
    %h3 Long Listing
    :markdown
      Now press the up arrow on your keyboard. Now that you got your `ls` back,
      turn it into this & hit Enter:

          $ ls -l

      The `-l` is called a "flag". You added a `-l` flag to the `ls` command,
      which tells `ls` to "long list" your files. This gives you all sorts of
      info about your files, like who owns them, what you can do with them,
      and the file size. Here's [what it all means][ls], if
      you're curious (and brave).

        [ls]: http://freeengineer.org/learnUNIXin10minutes.html#Listing

      One more thing about listing, right this way. &darr;

  %section
    %h3 Listing Hidden Files
    :markdown
      All this time using your computer, and you never even knew it was hiding
      all sorts of things from you! Enter this:

          $ ls -al

      Now you've added _two_ flags for `ls`. The `l` tells it to list "long",
      the `a` tells it to list "all". Not just the usual stuff, but all the
      stuff that's usually hidden from you, too!

      Hidden files start with a dot. They're often called "dotfiles". Notice
      the two "files" listed at the top, the single dot and the double dot.
      These aren't actual files. You'll learn more about them soon. &rarr;

%section
  %section
    %h3 Moving Around
    :markdown
      In the days when the command line was created, folders were called
      _directories_. So to change directories, try this:

          $ cd Desktop
          $ ls

      Now you're looking at your desktop on the command line. You Changed
      into the Directory called Desktop.

      &darr; That was to keep from getting lost.

  %section
    %h3 Where Are You?
    :markdown
      In case you forget what directory you're currently working in, you
      can ask to be told:

          $ pwd

      This means Print Working Directory; it prints the directory you're
      working in _to the screen_. (When this command was invented, screens
      didn't exist, so it would have actually printed it!)

      To get back to where you just came from, you could write `cd` followed
      by everything `pwd` showed you, minus the `/Desktop`. But there's
      an easier way. &darr;

  %section
    %h3 Back In With Your Parent
    :markdown
      To get into the _parent_ directory, do this

          $ cd ..

      So that `..` that you see when you `ls -a` is a link to a directory. A
      link to the parent directory of the one you're in. If this all feels
      really weird, try just `cd`ing into different folders and `cd ..`ing back
      out for a while, hitting `pwd` to see where you are in between.

      `..` isn't the only shortcut, though. &darr;

  %section
    %h3 Be Lazy
    :markdown
      Good coders are lazy. They do work up front to prevent long-term work.
      Here are some tricks to avoid typing:

      * `.` means "the directory you're in now". `ls .` = `ls`; `cd .` does nothing.
        But it's useful sometimes.
      * `~` (tilde) means "your home directory". You can `cd` into really obscure
        folders and easily `ls ~` or `cd ~`.
      * `cd` without anything after it (without any _arguments_) does the same
        thing as `cd ~`. It takes you home.
      * `*` (often called _splat_ because "asterisk" is _too long_) is a
        wildcard; try `ls ~/D*` & `ls ~/*s`.
      * `cd -` takes you back to the previous directory, so you can switch back &
        forth between two easily.

%section
  %section
    %h3 A New Name, A Move, A Copy
    :markdown
      Renaming a file is the same thing as moving it. You "move" it from
      one place/name to another. Let's create a file:

          $ touch tmp.txt

      <small>(`touch` will create a file if it doesn't exist, or re-save a file that's
      already there.)</small>

      move it:

          $ mv tmp.txt ~/Desktop

      and then rename it:

          $ cd ~/Desktop
          $ mv tmp.txt woohoo.txt

      To learn to make copies, this way. &darr;

  %section
    %h3 Copy Cat
    :markdown
      Let's make two of something.

          $ touch woohoo.txt
          $ cp woohoo.txt tmp.txt && ls

      `cp` makes copies. You just tell it the file to copy, and then the new place
      and name to put it/name it.

      The `&&` is how you enter multiple commands on one line. Make sure you use
      _two_ "&"s, though; using only one does something _veeery_ different!
      You'll be very confused if you only use one!

      <small>Using only one `&` starts something in the background. Search online
      to find out more about it.</small>

%section
  %section
    %h3 Reading Files
    :markdown
      Listing files is cool & all, but what if you want to see what's in them?
      There are lots of ways to do this. Some of the most common are `cat`
      (which con*cat*enates files), `more`, and `less`. Download [this
      file][quote] into your current working directory (remember [pwd][pwd]?)
      and then take a look:

          $ cat this-is-water
          $ more this-is-water
          $ less this-is-water

      Oh no! Now your whole terminal window has been taken over by `less`! And
      the scrolling's all weird! What to do? &darr;

        [quote]: /this-is-water
        [pwd]: #/3/1

  %section
    %h3 Less Is More
    :markdown
      So `cat` and `more` just plopped the contents of the file into _standard
      output_, but `less` took things over & messed up your scrolling. To get
      out of it, hit `q`. Phew!

      Ok, but let's try it again, with a bigger file. Download [this][dooms]
      to your current working directory and then type

          $ less my-father

      <small>At this point I _must_ pause and tell you to hit _Tab_ on your
      keyboard. Ta-da! Stop typing so much.</small>

      Ok, now, to scroll down, hit `Space`, `d`, or `e`. To scroll up, hit
      `b`, `u`, or `y`. These are common scrolling controls. `more` and `cat`
      actually use them, too, if the content is too big to all fit in your
      window.

        [dooms]: /my-father-moved-through-dooms-of-love

%section
  %section
    %h3 Editing Files
    :markdown
      Looking at contents of files is nice, but you can also edit them right
      from the command line. The simplest way is arguably `nano`. Go ahead
      and save [this file][dooms] to your current working directory and

          $ nano my-father-moved-through-dooms-of-love

      You can move the cursor around in `nano` with the arrow keys.  `nano`
      also has a bunch of shortcuts, which are all listed at the bottom (the
      `^` means "Control").  "WriteOut" means "Write the contents of this file
      Out to disc", which really just means "save". So to save the file after
      editing it, hit Control-O.

        [dooms]: /my-father-moved-through-dooms-of-love

  %section
    %h3 Vim
    :markdown
      `vim` is weird & [hard to learn][vimbook], but a lot of people [love it a
      lot][whyvim]. You'll inevitably run into it on your adventures, so it'll
      be good to know some basics.

      So let's open it up.

          $ vim my-father-moved-through-dooms-of-love

      Ok, there's a lot to say; right this way please. &darr;

        [vimbook]: http://pragprog.com/book/dnvim/practical-vim
        [whyvim]:  http://stevelosh.com/blog/2010/09/coming-home-to-vim/

  %section
    %h3 More Vim
    :markdown
      * **Modes**: `vim` starts out in "normal" mode, in which you cannot
        edit text. To move around in normal mode, press `h`, `j`, `k`, & `l`.
      * **Insert**: To enter "insert" mode (in which you actually edit stuff),
        hit `i`. To get back into "normal" mode (where you're _supposed to
        be_), hit "Escape" on your keyboard (waay in the top left).
      * **Commands**: To save, make sure you're in Normal mode and type `:w`
        and press Enter. To get out of `vim`, type `:q`. (You can combine these
        to save & quit: `:wq`.)

  %section
    %h3 Flame Wars
    :markdown
      Some programmers get really territorial and religious about their editor
      of choice. They make gang signs for `vim` and `emacs` (another popular
      editor). It's silly.

      [![comic about editors][comic]][link]

        [comic]: http://imgs.xkcd.com/comics/real_programmers.png "Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want."
        [link]:  http://xkcd.com/378/
%section
  %section
    %h3 Delete, Delete.
    :markdown
      The command line has no safety nets! When you delete things, they're gone
      for good. No steenkin' _trash_, no steenkin' _recycle bin_. Just _gone_.
      So be careful!

      But to get rid of the files you just downloaded, you can

          $ rm my-father-moved-through-dooms-of-love this-is-water

      Note that you just passed `rm` _two_ files to delete. You can list
      however many you want.

      But to `rm` whole folders, you'll need a different trick. &darr;

  %section
    %h3 Removing Whole Directories
    :markdown
      If you try to `rm` a directory, `rm` will get all whiny and say it can't.
      But you can make it do it anyway by passing it the `-r` flag.  (The `-r`
      stands for _recursive_, because if you're peculiar you might say that
      you're deleting the folder and then _recursively_ deleting everything in
      it. Maybe?? Anyhow.) Try it out! Make a directory then delete it:

          $ mkdir worthless-folder
          $ rm worthless-folder
          $ rm -r worthless-folder

%section
  %section
    %h3 Know Your Root
    :markdown
      You're not allowed to do certain things on your computer, because you
      could cause serious damage. You could literally _erase your whole hard
      drive_ by running something like `rm -rf /` (_don't do this!!_). Since no one wants to
      accidentally destroy things, you have to do extra work to change system
      files. You need _root access_. You need to be a _super user_. An
      _administrator_.

      This works differently on Windows than anything else. This way for
      instructions on any system. &darr;

  %section
    %h3 Living Dangerously on Windows
    :markdown
      On Windows, you'll need to find the Git-Bash icon either on your Desktop
      or in the Windows Menu (if you pinned it to the taskbar, this won't work
      there.) Right-click the icon and select "Run as Administrator". Now you
      can live as dangerously as you want! For example, you can now:

          $ cd /c
          $ mkdir woohoo
          $ rm -r woohoo

      &darr; Keep going for instructions for anything but Windows.

  %section
    %h3 Living Dangerously On Anything But Windows
    :markdown
      On most *nix-based systems these days, you're not allowed to just run
      around as a super user because that's _scary_. Instead, you prefix
      specific commands with `sudo`:

          $ cd /
          $ ls
          $ mkdir hahaha
          $ sudo mkdir hahaha

      <small>`/` is the _root directory_, which is where your whole hard drive's
      filesystem starts. When you `cd ..` here, you stay here.  You're not
      allowed to change things in here unless you `sudo`, which means _Super
      User DO_. When you type in your password, you won't see it.  You won't
      even see [splats](#/3/3). That's intentional, just type your password
      into the void & hit Enter.</small> 

  %section
    %h3 It's Like This
    :markdown
      [!["Make me a sandwich." "What? Make it yourself." "Sudo make me a sandwich." "OK."][comic]][link]

        [comic]: http://imgs.xkcd.com/comics/sandwich.png "Proper User Policy apparently means Simon Says"
        [link]:  http://xkcd.com/149/

%section
  %section
    %h3 Getting Other Unix Programs
    :markdown
      Sometimes the inbuilt stuff just isn't enough! If you want more, you'll need a _package manager_.

          $ cowsay Package Managers ftw!
            _______________________
           < Package Managers ftw! >
            -----------------------
                    \   ^__^
                     \  (oo)\_______
                        (__)\       )\/\
                            ||----w |
                            ||     ||

      Yes! An [ascii][ascii] cow! This way to get your own. &darr;

        [ascii]: https://en.wikipedia.org/wiki/ASCII

  %section
    %h3 Getting Cowsay and other fun things on Linux
    :markdown
      If you're using Linux, then you already have a package manager that you
      can use. On Ubuntu, you have two options, `apt-get` or `aptitude`.
      `aptitude` seems to be preferred by some people because it's better at
      uninstalling things. So:

          $ sudo aptitude install cowsay
          $ cowsay Hooray!

      If you're using a different version of Linux, then instead of `aptitude`
      you might have `yum` or something. Just search the web for what package
      manager to use with your flavor of Linux.

  %section
    %h3 Getting Cowsay and other fun things on OSX
    :markdown
      The preferred package manager for your Mac running OSX these days is
      [Homebrew][brew].  An older way was MacPorts, so you might still hear
      people mention that now & then. You can follow the link to Homebrew to
      see how to install it, but once you do, go ahead and

          $ brew install cowsay
          $ cowsay Hooray!

      <small>Note that Homebrew may whine about not having Xcode (or a
      compiler). Luckily, for `cowsay`, you don't need this. But for some
      things you might, so feel free to [download Xcode][store] from the Mac
      App Store (you only _need_ the [command line tools for Xcode][cli], but
      to just get those you need to sign up as an Apple developer. But that may
      be faster, since Xcode is a _huuuge_ install.)</small>

        [brew]: http://mxcl.github.com/homebrew/
        [store]: http://itunes.apple.com/us/app/xcode/id497799835
        [cli]: https://developer.apple.com/downloads

  %section
    %h3 Getting Cowsay and other fun things on Windows
    :markdown
      Coming soon&hellip;

%section
  %h3 Read The Effing Manual
  :markdown
    Now and then, when [n00bs][n00b] ask for help on forums, the crotchety
    enlightened will respond with a curt "rtfm". What manual??

    Usually, every unix program comes with a manual (also called a
    "man page"). To read it, just do this with any command:

        $ man ls

    <small>This may open in `less`. [Remember less][less]?</small>

    Go ahead and check out the manual for some of the programs you've
    learned about (`cd`, `less`, `cowsay`, etc).

      [n00b]: https://en.wikipedia.org/wiki/N00b
      [less]: #/5/1

%section
  %section
    %h3 Pipes
    :markdown
      Look at the slash key on your keyboard that's above the Enter key
      (that's the backslash, by the way; the one on the `?` key is just
      "slash"). The vertical line above the backslash is called the "pipe"
      character.

      The philosophy of unix is that programs should do one very simple thing,
      and do it well. Then you can use pipes to hook multiple programs
      together. Try this:

          $ ls ~ | less

      You piped the results of `ls` into `less`! There are other kinds of
      pipes, too. &darr;

  %section
    %h3 A Series Of Pipes
    :markdown
      Try this:

          $ echo "So what?"

      Indeed, so what? `echo` just spits out what you tell it to. But with
      pipes, it gets cooler.

          $ echo "Here's something" > tmp.txt && less tmp.txt

      The `>` pipe _totally overwrites_ a file. Try this now:

          $ echo "& more." >> tmp.txt && less tmp.txt

      The `>>` pipe _appends_ to a file without destroying what was already
      there.

  %section
    %h3 Blanking Out Files
    :markdown
      There's an interesting twist on the `>` pipe: it doesn't need anything
      before it. Try this:

          $ > tmp.txt

      You just piped _nothing_ into tmp.txt. You overwrote all of its contents
      with nothing. Open it up (`cat` it, or `more` it, or whatever-you-like
      it) and you'll see that it's now empty.

%section
  %h3 I Quit
  :markdown
    To _force quit_ a process that seems to be stuck, just hit Control-C.

    This is used in a lot of places. Open up `ls ~ | less` and then hit
    Shift-F. This _follows_ the file, automatically showing you new content
    as it appears. To get it to stop following the file, you have to
    "interrupt" it, which you do with Control-C. Then you can `q` as normal
    to get out of `less` altogether.

%section
  %h3 Making It Pretty
  :markdown
    Bash can be customized by putting a `.bashrc` file in your home
    directory. This is a common pattern; you can also have a `.vimrc`,
    a `.nanorc`, and rc files for many other unix programs.

    <small>`rc` stands for "Runtime Control", which doesn't shed a whole lot
    of light. Just remember that rc files are configuration files.</small>

    Here's a nice getting-started [.bashrc][brc] file that you can
    download and edit with `nano` or `vim` to get started (make sure to save it
    to your home folder as ".bashrc" (_with the dot!!_)). You can [search
    Github][dotfiles] for "dotfiles" for lots of other ideas.

      [brc]: /.bashrc
      [dotfiles]: https://github.com/search?q=dotfiles+bash&repo=&langOverride=&start_value=1&type=Everything&language=
