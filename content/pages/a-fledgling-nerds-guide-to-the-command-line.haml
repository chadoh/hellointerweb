Layout: slides

%section
  %section
    %h3 A Fledgling Nerd's Guide To
    %h1 The Command Line
    %a(href="http://www.iterm2.com/")
      %img(src='http://upload.wikimedia.org/wikipedia/en/d/d7/ITerm2-icon.png'
           alt='' class='no-border' style="width: 256px")
    :markdown
      This is the second part of a [non-nerd's guide][non-nerds-guide] to
      the command line. You'll be definitively intermediate by the finish.
      To get started, go that way. &rarr;

        [non-nerds-guide]: /a-non-nerds-guide-to-the-command-line

%section
  %section
    %h2 Editing Files
    :markdown
      [Looking at contents of files][reading] is nice, but you can also edit them right
      from the command line. The simplest way is arguably `nano`. Go ahead
      and save [this file][dooms] to your current working directory and

          $ nano my-father-moved-through-dooms-of-love

      You can move the cursor around in `nano` with the arrow keys.  `nano`
      also has a bunch of shortcuts, which are all listed at the bottom (the
      `^` means "Control").  "WriteOut" means "Write the contents of this file
      Out to disc", which really just means "save". So to save the file after
      editing it, hit Control-O.

        [reading]: /a-non-nerds-guide-to-the-command-line#/5
        [dooms]: /my-father-moved-through-dooms-of-love

  %section
    %h2 Vim
    :markdown
      `vim` is weird & [hard to learn][vimbook], but a lot of people [love it a
      lot][whyvim]. You'll inevitably run into it on your adventures, so it'll
      be good to know some basics.

      So let's open it up.

          $ vim my-father-moved-through-dooms-of-love

      Ok, there's a lot to say; right this way please. &darr;

        [vimbook]: http://pragprog.com/book/dnvim/practical-vim
        [whyvim]:  http://stevelosh.com/blog/2010/09/coming-home-to-vim/

  %section
    %h2 More Vim
    :markdown
      * **Modes**: `vim` starts out in "normal" mode, in which you cannot
        edit text. To move around in normal mode, press `h`, `j`, `k`, & `l`.
      * **Insert**: To enter "insert" mode (in which you actually edit stuff),
        hit `i`. To get back into "normal" mode (where you're _supposed to
        be_), hit "Escape" on your keyboard (waay in the top left).
      * **Commands**: To save, make sure you're in Normal mode and type `:w`
        and press Enter. To get out of `vim`, type `:q`. (You can combine these
        to save & quit: `:wq`.)

  %section
    %h2 Flame Wars
    :markdown
      Some programmers get really territorial and religious about their editor
      of choice. They make gang signs for `vim` and `emacs` (another popular
      editor). It's silly.

      [![comic about editors][comic]][link]

        [comic]: http://imgs.xkcd.com/comics/real_programmers.png "Real programmers set the universal constants at the start such that the universe evolves to contain the disk with the data they want."
        [link]:  http://xkcd.com/378/

%section
  %section
    %h2 Know Your Root
    :markdown
      You're not allowed to do certain things on your computer, because you
      could cause serious damage. You could literally _erase your whole hard
      drive_ by running something like `rm -rf /` (_don't do this!!_). Since no one wants to
      accidentally destroy things, you have to do extra work to change system
      files. You need _root access_. You need to be a _super user_. An
      _administrator_.

      This works differently on Windows than anything else. This way for
      instructions on any system. &darr;

  %section
    %h2 Living Dangerously on Windows
    :markdown
      On Windows, you'll need to find the Git-Bash icon either on your Desktop
      or in the Windows Menu (if you pinned it to the taskbar, this won't work
      there.) Right-click the icon and select "Run as Administrator". Now you
      can live as dangerously as you want! For example, you can now:

          $ cd /c
          $ mkdir woohoo
          $ rm -r woohoo

      &darr; Keep going for instructions for anything but Windows.

  %section
    %h2 Living Dangerously On Anything But Windows
    :markdown
      On most *nix-based systems these days, you're not allowed to just run
      around as a super user because that's _scary_. Instead, you prefix
      specific commands with `sudo`:

          $ cd /
          $ ls
          $ mkdir bahaha
          $ sudo mkdir bahaha

      <small>
        When you type in your password, you won't see it.  You won't
        even see [splats](#/3/3). That's intentional, just type your password
        into the void & hit Enter.

        `/` is the _root directory_, which is where your whole hard drive's
        filesystem starts. When you `cd ..` here, you stay here.  You're not
        allowed to change things in here unless you `sudo`, which means _Super
        User DO_.
      </small> 

  %section
    %h2 It's Like This
    :markdown
      [!["Make me a sandwich." "What? Make it yourself." "Sudo make me a sandwich." "OK."][comic]][link]

        [comic]: http://imgs.xkcd.com/comics/sandwich.png "Proper User Policy apparently means Simon Says"
        [link]:  http://xkcd.com/149/

      <small>By the way, you might want to `rm bahaha` now.</small>

%section
  %section
    %h2 Getting Other Unix Programs
    :markdown
      Sometimes the inbuilt stuff just isn't enough! If you want more, you'll need a _package manager_.

          $ cowsay Package Managers ftw!
            _______________________
           < Package Managers ftw! >
            -----------------------
                    \   ^__^
                     \  (oo)\_______
                        (__)\       )\/\
                            ||----w |
                            ||     ||

      Yes! An [ascii][ascii] cow! This way to get your own. &darr;

        [ascii]: https://en.wikipedia.org/wiki/ASCII

  %section
    %h2 Getting Cowsay and other fun things on Linux
    :markdown
      If you're using Linux, then you already have a package manager that you
      can use. On Ubuntu, you have two options, `apt-get` or `aptitude`.
      `aptitude` seems to be preferred by some people because it's better at
      uninstalling things. So:

          $ sudo aptitude install cowsay
          $ cowsay Hooray!

      If you're using a different version of Linux, then instead of `aptitude`
      you might have `yum` or something. Just search the web for what package
      manager to use with your flavor of Linux.

  %section
    %h2 Getting Cowsay and other fun things on OSX
    :markdown
      The preferred package manager for your Mac running OSX these days is
      [Homebrew][brew].  An older way was MacPorts, so you might still hear
      people mention that now & then. You can follow the link to Homebrew to
      see how to install it, but once you do, go ahead and

          $ brew install cowsay
          $ cowsay Hooray!

      <small>Note that Homebrew may whine about not having Xcode (or a
      compiler). Luckily, for `cowsay`, you don't need this. But for some
      things you might, so feel free to [download Xcode][store] from the Mac
      App Store (you only _need_ the [command line tools for Xcode][cli], but
      to just get those you need to sign up as an Apple developer. But that may
      be faster, since Xcode is a _huuuge_ install.)</small>

        [brew]: http://mxcl.github.com/homebrew/
        [store]: http://itunes.apple.com/us/app/xcode/id497799835
        [cli]: https://developer.apple.com/downloads

  %section
    %h2 Getting Cowsay and other fun things on Windows
    :markdown
      Coming soon&hellip;

%section
  %h2 Read The Effing Manual
  :markdown
    Now and then, when [n00bs][n00b] ask for help on forums, the crotchety
    enlightened will respond with a curt "rtfm". What manual??

    Usually, every unix program comes with a manual (also called a
    "man page"). To read it, just do this with any command:

        $ man ls

    <small>This may open in `less`. [Remember less][less]?</small>

    Go ahead and check out the manual for some of the programs you've
    learned about (`cd`, `less`, `cowsay`, etc).

      [n00b]: https://en.wikipedia.org/wiki/N00b
      [less]: /a-non-nerds-guide-to-the-command-line#/5/1

%section
  %section
    %h2 Pipes
    :markdown
      Look at the slash key on your keyboard that's above the Enter key
      (that's the backslash, by the way; the one on the `?` key is just
      "slash"). The vertical line above the backslash is called the "pipe"
      character.

      The philosophy of unix is that programs should do one very simple thing,
      and do it well. Then you can use pipes to hook multiple programs
      together. Try this:

          $ ls ~ | less

      You piped the results of `ls` into `less`! There are other kinds of
      pipes, too. &darr;

  %section
    %h2 A Series Of Pipes
    :markdown
      Try this:

          $ echo "So what?"

      Indeed, so what? `echo` just spits out what you tell it to. But with
      pipes, it gets cooler.

          $ echo "Here's something" > tmp.txt && less tmp.txt

      The `>` pipe _totally overwrites_ a file. Try this now:

          $ echo "& more." >> tmp.txt && less tmp.txt

      The `>>` pipe _appends_ to a file without destroying what was already
      there.

  %section
    %h2 Blanking Out Files
    :markdown
      There's an interesting twist on the `>` pipe: it doesn't need anything
      before it. Try this:

          $ > tmp.txt

      You just piped _nothing_ into tmp.txt. You overwrote all of its contents
      with nothing. Open it up (`cat` it, or `more` it, or whatever-you-like
      it) and you'll see that it's now empty.

%section
  %h2 I Quit
  :markdown
    To _force quit_ a process that seems to be stuck, just hit Control-C.

    This is used in a lot of places. Open up `ls ~ | less` and then hit
    Shift-F. This _follows_ the file, automatically showing you new content
    as it appears. To get it to stop following the file, you have to
    "interrupt" it, which you do with Control-C. Then you can `q` as normal
    to get out of `less` altogether.

%section
  %section
    %h2 Making It Pretty
    :markdown
      Bash can be customized by putting a `.bashrc` file in your home
      directory. This is a common pattern; you can also have a `.vimrc`,
      a `.nanorc`, and rc files for many other unix programs.

      <small>`rc` stands for "Runtime Control", which doesn't shed a whole lot
      of light. Just remember that rc files are configuration files.</small>

      Here's a nice getting-started [.bashrc][brc] file that you can
      download and edit with `nano` or `vim` to get started (make sure to save it
      to your home folder as ".bashrc" (_with the dot!!_)). You can [search
      Github][dotfiles] for "dotfiles" for lots of other ideas.

        [brc]: /.bashrc
        [dotfiles]: https://github.com/search?q=dotfiles+bash&repo=&langOverride=&start_value=1&type=Everything&language=

  %section
    %h3 Pretty Prompt
    %img(src='http://f.cl.ly/items/2e0K0t1q050i1W2B011P/dotfiles.png'
         alt='a pretty shell prompt' class='no-border')
    :markdown
      Look through the .bashrc you downloaded for instructions on how to make your shell look like this.

%section
  %h2 Awesome
  :markdown
    You know a lot about the command line.

    Go boss your computer around.

  %img(class='no-border' alt=''
    src='/assets/images/hooray.png')
